# -*- coding: utf-8 -*-
"""Diabetes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uY6U1BQUcO1LF7fcPC_Xjpciyb5ewK3t

Using Pima Indian Diabetes data, predict with 70% or greater accuracy which people are likely to develop diabetes
"""

from google.colab import files
import pandas as pd
import matplotlib.pyplot as plt
import io
import numpy as np
# %matplotlib inline

upload = files.upload()

df = pd.read_csv(io.StringIO(upload['diabetes.csv'].decode('utf-8')))

df.head(5)

#check for null values
df.isnull().values.any()

#correlation matrix for each pair
def co_relation(df,size=11):
    corr=df.corr()
    fig,ax=plt.subplots(figsize=(size,size))
    ax.matshow(corr)
    plt.xticks(range(len(corr.columns)),corr.columns,rotation=50)
    plt.yticks(range(len(corr.columns)),corr.columns)

co_relation(df)

"""Check Diabetes ratio"""

num_true = len(df.loc[df['Outcome']==True])
num_false = len(df.loc[df['Outcome']==False])
print("True cases: {0} ({1:2.2f}%)".format(num_true,(num_true/(num_true+num_false))*100))
print("False cases: {0} ({1:2.2f}%)".format(num_false,(num_false/(num_true+num_false))*100))

df.head(5)

"""**TRAINING THE MODEL**"""

from sklearn.model_selection import train_test_split
feature_col_names =['Pregnancies','Glucose','BloodPressure',
                    'SkinThickness','Insulin','BMI',
                    'DiabetesPedigreeFunction','Age']
#Outcome == Diabetes
#1= True
#0= False
predicted_class_name =['Outcome']
x = df[feature_col_names].values
y = df[predicted_class_name].values
split_test_size = 0.30
X_train,X_test, Y_train, Y_test = train_test_split(x,y, test_size = split_test_size, random_state=42)

"""CONFIRM DATA IS SPLIT CORRECTLY 70% 30%"""

print("Training data: ({0:0.2f}%)".format((len(X_train)/len(df.index))*100))
print("Test data: ({0:0.2f}%)".format((len(X_test)/len(df.index))*100))

print("Original True  : {0} ({1:0.2f}%)".format(len(df.loc[df['Outcome'] == 1]), (len(df.loc[df['Outcome'] == 1])/len(df.index)) * 100.0))
print("Original False : {0} ({1:0.2f}%)".format(len(df.loc[df['Outcome'] == 0]), (len(df.loc[df['Outcome'] == 0])/len(df.index)) * 100.0))
print("")
print("Training True  : {0} ({1:0.2f}%)".format(len(Y_train[Y_train[:] == 1]), (len(Y_train[Y_train[:] == 1])/len(Y_train) * 100.0)))
print("Training False : {0} ({1:0.2f}%)".format(len(Y_train[Y_train[:] == 0]), (len(Y_train[Y_train[:] == 0])/len(Y_train) * 100.0)))
print("")
print("Test True      : {0} ({1:0.2f}%)".format(len(Y_test[Y_test[:] == 1]), (len(Y_test[Y_test[:] == 1])/len(Y_test) * 100.0)))
print("Test False     : {0} ({1:0.2f}%)".format(len(Y_test[Y_test[:] == 0]), (len(Y_test[Y_test[:] == 0])/len(Y_test) * 100.0)))

df.head(5)

"""replace 0 with mean"""

from sklearn.impute import SimpleImputer

fill_0 = SimpleImputer(missing_values=0, strategy="mean")
X_train = fill_0.fit_transform(X_train)
X_test = fill_0.fit_transform(X_test)

"""training model"""

from sklearn.naive_bayes import GaussianNB


nb_model = GaussianNB()

nb_model.fit(X_train, Y_train.ravel())

"""perfomance after training"""

nb_predict_train = nb_model.predict(X_train)


from sklearn import metrics

# printing accuracy
print("Accuracy: {0:.4f}".format(metrics.accuracy_score(Y_train, nb_predict_train)))
print()